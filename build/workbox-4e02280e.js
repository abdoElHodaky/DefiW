define(["exports"],(function(e){"use strict";try{self["workbox:core:7.0.0"]&&_()}catch(Fe){}const t=(()=>{"__WB_DISABLE_DEV_LOGS"in globalThis||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,s){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...s);const a=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...a,...s),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},s={},a=Object.keys(t);for(const n of a){const e=n;s[e]=(...t)=>{r(e,t)}}return s})(),r={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:s})=>{if(!e||!t||!r||!s)throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${s}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:s,funcName:a})=>{if(!e||!t||!r||!a)throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${s?`${s}.`:""}${a}()' must be of type ${e}.`},"incorrect-class":({expectedClassName:e,paramName:t,moduleName:r,className:s,funcName:a,isReturnValueProblem:n})=>{if(!e||!r||!a)throw new Error("Unexpected input to 'incorrect-class' error.");const o=s?`${s}.`:"";return n?`The return value from '${r}.${o}${a}()' must be an instance of class ${e}.`:`The parameter '${t}' passed into '${r}.${o}${a}()' must be an instance of class ${e}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:s,funcName:a})=>{if(!e||!t||!r||!s||!a)throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${s}.${a}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:s})=>`The supplied '${s}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:s,funcName:a,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${s}.${a}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`,"opaque-streams-source":({type:e})=>{const t=`One of the workbox-streams sources resulted in an '${e}' response.`;return"opaqueredirect"===e?`${t} Please do not use a navigation request that results in a redirect as a source.`:`${t} Please ensure your sources are CORS-enabled.`}},s=(e,t={})=>{const s=r[e];if(!s)throw new Error(`Unable to find message for code '${e}'.`);return s(t)};class a extends Error{constructor(e,t){super(s(e,t)),this.name=e,this.details=t}}const n=(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new a("missing-a-method",r)},o=(e,t)=>{if(!Array.isArray(e))throw new a("not-an-array",t)},i=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClassName=t.name,new a("incorrect-class",r)},c=(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new a("invalid-value",r)},u=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new a("incorrect-type",r)};try{self["workbox:routing:7.0.0"]&&_()}catch(Fe){}const h=["DELETE","GET","HEAD","PATCH","POST","PUT"],l=e=>e&&"object"===typeof e?(n(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(u(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class d{constructor(e,t,r="GET"){u(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&c(r,h,{paramName:"method"}),this.handler=l(t),this.match=e,this.method=r}setCatchHandler(e){this.catchHandler=l(e)}}class m extends d{constructor(e,r,s){i(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:r})=>{const s=e.exec(r.href);if(s){if(r.origin===location.origin||0===s.index)return s.slice(1);t.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${r.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),r,s)}}const p=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");class g{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:r}=e.data;t.debug("Caching URLs from the window",r.urlsToCache);const s=Promise.all(r.urlsToCache.map((t=>{"string"===typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(s),e.ports&&e.ports[0]&&s.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:r}){i(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return void t.debug("Workbox Router only supports URLs that start with 'http'.");const a=s.origin===location.origin,{params:n,route:o}=this.findMatchingRoute({event:r,request:e,sameOrigin:a,url:s});let c=o&&o.handler;const u=[];c&&(u.push(["Found a route to handle this request:",o]),n&&u.push(["Passing the following params to the route's handler:",n]));const h=e.method;if(!c&&this._defaultHandlerMap.has(h)&&(u.push(`Failed to find a matching route. Falling back to the default handler for ${h}.`),c=this._defaultHandlerMap.get(h)),!c)return void t.debug(`No route found for: ${p(s)}`);let l;t.groupCollapsed(`Router is responding to: ${p(s)}`),u.forEach((e=>{Array.isArray(e)?t.log(...e):t.log(e)})),t.groupEnd();try{l=c.handle({url:s,request:e,event:r,params:n})}catch(m){l=Promise.reject(m)}const d=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async a=>{if(d){t.groupCollapsed(`Error thrown when responding to:  ${p(s)}. Falling back to route's Catch Handler.`),t.error("Error thrown by:",o),t.error(a),t.groupEnd();try{return await d.handle({url:s,request:e,event:r,params:n})}catch(i){i instanceof Error&&(a=i)}}if(this._catchHandler)return t.groupCollapsed(`Error thrown when responding to:  ${p(s)}. Falling back to global Catch Handler.`),t.error("Error thrown by:",o),t.error(a),t.groupEnd(),this._catchHandler.handle({url:s,request:e,event:r});throw a}))),l}findMatchingRoute({url:e,sameOrigin:r,request:s,event:a}){const n=this._routes.get(s.method)||[];for(const o of n){let n;const i=o.match({url:e,sameOrigin:r,request:s,event:a});if(i)return i instanceof Promise&&t.warn(`While routing ${p(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,o),n=i,(Array.isArray(n)&&0===n.length||i.constructor===Object&&0===Object.keys(i).length||"boolean"===typeof i)&&(n=void 0),{route:o,params:n}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,l(e))}setCatchHandler(e){this._catchHandler=l(e)}registerRoute(e){u(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),u(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),u(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new a("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new a("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let f;const w=()=>(f||(f=new g,f.addFetchListener(),f.addCacheListener()),f);function y(e,r,s){let n;if("string"===typeof e){const o=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new a("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const r=e.startsWith("http")?o.pathname:e,s="[*:?+]";new RegExp(`${s}`).exec(r)&&t.debug(`The '$capture' parameter contains an Express-style wildcard character (${s}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}n=new d((({url:r})=>(r.pathname===o.pathname&&r.origin!==o.origin&&t.debug(`${e} only partially matches the cross-origin URL ${r.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),r.href===o.href)),r,s)}else if(e instanceof RegExp)n=new m(e,r,s);else if("function"===typeof e)n=new d(e,r,s);else{if(!(e instanceof d))throw new a("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});n=e}return w().registerRoute(n),n}const b={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!==typeof registration?registration.scope:""},N=e=>[b.prefix,e,b.suffix].filter((e=>e&&e.length>0)).join("-"),x=e=>e||N(b.precache),R=e=>e||N(b.runtime);function q(e){e.then((()=>{}))}const v=new Set;function E(){return E=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)({}).hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},E.apply(null,arguments)}const k=(e,t)=>t.some((t=>e instanceof t));let C,$;const D=new WeakMap,T=new WeakMap,S=new WeakMap,L=new WeakMap,U=new WeakMap;let P={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return T.get(e);if("objectStoreNames"===t)return e.objectStoreNames||S.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return B(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function I(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?($||($=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(O(this),t),B(D.get(this))}:function(...t){return B(e.apply(O(this),t))}:function(t,...r){const s=e.call(O(this),t,...r);return S.set(s,t.sort?t.sort():[t]),B(s)}}function A(e){return"function"===typeof e?I(e):(e instanceof IDBTransaction&&function(e){if(T.has(e))return;const t=new Promise(((t,r)=>{const s=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",n),e.removeEventListener("abort",n)},a=()=>{t(),s()},n=()=>{r(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",a),e.addEventListener("error",n),e.addEventListener("abort",n)}));T.set(e,t)}(e),k(e,C||(C=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,P):e)}function B(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const s=()=>{e.removeEventListener("success",a),e.removeEventListener("error",n)},a=()=>{t(B(e.result)),s()},n=()=>{r(e.error),s()};e.addEventListener("success",a),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&D.set(t,e)})).catch((()=>{})),U.set(t,e),t}(e);if(L.has(e))return L.get(e);const t=A(e);return t!==e&&(L.set(e,t),U.set(t,e)),t}const O=e=>U.get(e);const j=["get","getKey","getAll","getAllKeys","count"],M=["put","add","delete","clear"],K=new Map;function W(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!==typeof t)return;if(K.get(t))return K.get(t);const r=t.replace(/FromIndex$/,""),s=t!==r,a=M.includes(r);if(!(r in(s?IDBIndex:IDBObjectStore).prototype)||!a&&!j.includes(r))return;const n=async function(e,...t){const n=this.transaction(e,a?"readwrite":"readonly");let o=n.store;return s&&(o=o.index(t.shift())),(await Promise.all([o[r](...t),a&&n.done]))[0]};return K.set(t,n),n}P=(e=>E({},e,{get:(t,r,s)=>W(t,r)||e.get(t,r,s),has:(t,r)=>!!W(t,r)||e.has(t,r)}))(P);try{self["workbox:expiration:7.0.0"]&&_()}catch(Fe){}const F="cache-entries",V=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class H{constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore(F,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&function(e,{blocked:t}={}){const r=indexedDB.deleteDatabase(e);t&&r.addEventListener("blocked",(e=>t(e.oldVersion,e))),B(r).then((()=>{}))}(this._cacheName)}async setTimestamp(e,t){const r={url:e=V(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)},s=(await this.getDb()).transaction(F,"readwrite",{durability:"relaxed"});await s.store.put(r),await s.done}async getTimestamp(e){const t=await this.getDb(),r=await t.get(F,this._getId(e));return null===r||void 0===r?void 0:r.timestamp}async expireEntries(e,t){const r=await this.getDb();let s=await r.transaction(F).store.index("timestamp").openCursor(null,"prev");const a=[];let n=0;for(;s;){const r=s.value;r.cacheName===this._cacheName&&(e&&r.timestamp<e||t&&n>=t?a.push(s.value):n++),s=await s.continue()}const o=[];for(const i of a)await r.delete(F,i.id),o.push(i.url);return o}_getId(e){return this._cacheName+"|"+V(e)}async getDb(){return this._db||(this._db=await function(e,t,{blocked:r,upgrade:s,blocking:a,terminated:n}={}){const o=indexedDB.open(e,t),i=B(o);return s&&o.addEventListener("upgradeneeded",(e=>{s(B(o.result),e.oldVersion,e.newVersion,B(o.transaction),e)})),r&&o.addEventListener("blocked",(e=>r(e.oldVersion,e.newVersion,e))),i.then((e=>{n&&e.addEventListener("close",(()=>n())),a&&e.addEventListener("versionchange",(e=>a(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),i}("workbox-expiration",1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class Q{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,u(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new a("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&u(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&u(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new H(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,r=await this._timestampModel.expireEntries(e,this._maxEntries),s=await self.caches.open(this._cacheName);for(const t of r)await s.delete(t,this._matchOptions);r.length>0?(t.groupCollapsed(`Expired ${r.length} `+(1===r.length?"entry":"entries")+" and removed "+(1===r.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),t.log(`Expired the following ${1===r.length?"URL":"URLs"}:`),r.forEach((e=>t.log(`    ${e}`))),t.groupEnd()):t.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,q(this.expireEntries()))}async updateTimestamp(e){u(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),r=Date.now()-1e3*this._maxAgeSeconds;return void 0===t||t<r}throw new a("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}function G(e,t){const r=new URL(e);for(const s of t)r.searchParams.delete(s);return r.href}class z{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}function J(e){return new Promise((t=>setTimeout(t,e)))}try{self["workbox:strategies:7.0.0"]&&_()}catch(Fe){}function Y(e){return"string"===typeof e?new Request(e):e}class X{constructor(e,t){this._cacheKeys={},i(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new z,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const r of this._plugins)this._pluginStateMap.set(r,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:r}=this;let s=Y(e);if("navigate"===s.mode&&r instanceof FetchEvent&&r.preloadResponse){const e=await r.preloadResponse;if(e)return t.log(`Using a preloaded navigation response for '${p(s.url)}'`),e}const n=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))s=await e({request:s.clone(),event:r})}catch(i){if(i instanceof Error)throw new a("plugin-error-request-will-fetch",{thrownErrorMessage:i.message})}const o=s.clone();try{let e;e=await fetch(s,"navigate"===s.mode?void 0:this._strategy.fetchOptions),t.debug(`Network request for '${p(s.url)}' returned a response with status '${e.status}'.`);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:r,request:o,response:e});return e}catch(c){throw t.log(`Network request for '${p(s.url)}' threw an error.`,c),n&&await this.runCallbacks("fetchDidFail",{error:c,event:r,originalRequest:n.clone(),request:o.clone()}),c}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const r=Y(e);let s;const{cacheName:a,matchOptions:n}=this._strategy,o=await this.getCacheKey(r,"read"),i=Object.assign(Object.assign({},n),{cacheName:a});s=await caches.match(o,i),s?t.debug(`Found a cached response in '${a}'.`):t.debug(`No cached response found in '${a}'.`);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:a,matchOptions:n,cachedResponse:s,request:o,event:this.event})||void 0;return s}async cachePut(e,r){const s=Y(e);await J(0);const n=await this.getCacheKey(s,"write");{if(n.method&&"GET"!==n.method)throw new a("attempt-to-cache-non-get-request",{url:p(n.url),method:n.method});const e=r.headers.get("Vary");e&&t.debug(`The response for ${p(n.url)} has a 'Vary: ${e}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!r)throw t.error(`Cannot cache non-existent response for '${p(n.url)}'.`),new a("cache-put-with-no-response",{url:p(n.url)});const o=await this._ensureResponseSafeToCache(r);if(!o)return t.debug(`Response '${p(n.url)}' will not be cached.`,o),!1;const{cacheName:i,matchOptions:c}=this._strategy,u=await self.caches.open(i),h=this.hasCallback("cacheDidUpdate"),l=h?await async function(e,t,r,s){const a=G(t.url,r);if(t.url===a)return e.match(t,s);const n=Object.assign(Object.assign({},s),{ignoreSearch:!0}),o=await e.keys(t,n);for(const i of o)if(a===G(i.url,r))return e.match(i,s)}(u,n.clone(),["__WB_REVISION__"],c):null;t.debug(`Updating the '${i}' cache with a new Response for ${p(n.url)}.`);try{await u.put(n,h?o.clone():o)}catch(d){if(d instanceof Error)throw"QuotaExceededError"===d.name&&await async function(){t.log(`About to run ${v.size} callbacks to clean up caches.`);for(const e of v)await e(),t.log(e,"is complete.");t.log("Finished running callbacks.")}(),d}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:i,oldResponse:l,newResponse:o.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){const r=`${e.url} | ${t}`;if(!this._cacheKeys[r]){let s=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))s=Y(await e({mode:t,request:s,event:this.event,params:this.params}));this._cacheKeys[r]=s}return this._cacheKeys[r]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"===typeof t[e]){const r=this._pluginStateMap.get(t),s=s=>{const a=Object.assign(Object.assign({},s),{state:r});return t[e](a)};yield s}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let r=e,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(r=await t({request:this.request,response:r,event:this.event})||void 0,s=!0,!r)break;return s||(r&&200!==r.status&&(r=void 0),r&&200!==r.status&&(0===r.status?t.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):t.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),r}}class Z{constructor(e={}){this.cacheName=R(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"===typeof e.request?new Request(e.request):e.request,s="params"in e?e.params:void 0,a=new X(this,{event:t,request:r,params:s}),n=this._getResponse(a,r,t);return[n,this._awaitComplete(n,a,r,t)]}async _getResponse(e,r,s){let n;await e.runCallbacks("handlerWillStart",{event:s,request:r});try{if(n=await this._handle(r,e),!n||"error"===n.type)throw new a("no-response",{url:r.url})}catch(o){if(o instanceof Error)for(const t of e.iterateCallbacks("handlerDidError"))if(n=await t({error:o,event:s,request:r}),n)break;if(!n)throw o;t.log(`While responding to '${p(r.url)}', an ${o instanceof Error?o.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const t of e.iterateCallbacks("handlerWillRespond"))n=await t({event:s,request:r,response:n});return n}async _awaitComplete(e,t,r,s){let a,n;try{a=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:s,request:r,response:a}),await t.doneWaiting()}catch(o){o instanceof Error&&(n=o)}if(await t.runCallbacks("handlerDidComplete",{event:s,request:r,response:a,error:n}),t.destroy(),n)throw n}}const ee=(e,t)=>`Using ${e} to respond to '${p(t.url)}'`,te=e=>{e&&(t.groupCollapsed("View the final response here."),t.log(e||"[No response returned]"),t.groupEnd())};try{self["workbox:cacheable-response:7.0.0"]&&_()}catch(Fe){}class re{constructor(e={}){if(!e.statuses&&!e.headers)throw new a("statuses-or-headers-required",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor"});e.statuses&&o(e.statuses,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.statuses"}),e.headers&&u(e.headers,"object",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.headers"}),this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){i(e,Response,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"isResponseCacheable",paramName:"response"});let r=!0;if(this._statuses&&(r=this._statuses.includes(e.status)),this._headers&&r&&(r=Object.keys(this._headers).some((t=>e.headers.get(t)===this._headers[t]))),!r){t.groupCollapsed(`The request for '${p(e.url)}' returned a response that does not meet the criteria for being cached.`),t.groupCollapsed("View cacheability criteria here."),t.log("Cacheable statuses: "+JSON.stringify(this._statuses)),t.log("Cacheable headers: "+JSON.stringify(this._headers,null,2)),t.groupEnd();const r={};e.headers.forEach(((e,t)=>{r[t]=e})),t.groupCollapsed("View response status and headers here."),t.log(`Response status: ${e.status}`),t.log("Response headers: "+JSON.stringify(r,null,2)),t.groupEnd(),t.groupCollapsed("View full response details here."),t.log(e.headers),t.log(e),t.groupEnd(),t.groupEnd()}return r}}const se={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};const ae=(e,t)=>t.some((t=>e instanceof t));let ne,oe;const ie=new WeakMap,ce=new WeakMap,ue=new WeakMap,he=new WeakMap,le=new WeakMap;let de={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return ce.get(e);if("objectStoreNames"===t)return e.objectStoreNames||ue.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return ge(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function me(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(oe||(oe=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(fe(this),t),ge(ie.get(this))}:function(...t){return ge(e.apply(fe(this),t))}:function(t,...r){const s=e.call(fe(this),t,...r);return ue.set(s,t.sort?t.sort():[t]),ge(s)}}function pe(e){return"function"===typeof e?me(e):(e instanceof IDBTransaction&&function(e){if(ce.has(e))return;const t=new Promise(((t,r)=>{const s=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",n),e.removeEventListener("abort",n)},a=()=>{t(),s()},n=()=>{r(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",a),e.addEventListener("error",n),e.addEventListener("abort",n)}));ce.set(e,t)}(e),ae(e,ne||(ne=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,de):e)}function ge(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const s=()=>{e.removeEventListener("success",a),e.removeEventListener("error",n)},a=()=>{t(ge(e.result)),s()},n=()=>{r(e.error),s()};e.addEventListener("success",a),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&ie.set(t,e)})).catch((()=>{})),le.set(t,e),t}(e);if(he.has(e))return he.get(e);const t=pe(e);return t!==e&&(he.set(e,t),le.set(t,e)),t}const fe=e=>le.get(e);const we=["get","getKey","getAll","getAllKeys","count"],ye=["put","add","delete","clear"],be=new Map;function Ne(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!==typeof t)return;if(be.get(t))return be.get(t);const r=t.replace(/FromIndex$/,""),s=t!==r,a=ye.includes(r);if(!(r in(s?IDBIndex:IDBObjectStore).prototype)||!a&&!we.includes(r))return;const n=async function(e,...t){const n=this.transaction(e,a?"readwrite":"readonly");let o=n.store;return s&&(o=o.index(t.shift())),(await Promise.all([o[r](...t),a&&n.done]))[0]};return be.set(t,n),n}!function(e){de=e(de)}((e=>E({},e,{get:(t,r,s)=>Ne(t,r)||e.get(t,r,s),has:(t,r)=>!!Ne(t,r)||e.has(t,r)})));try{self["workbox:background-sync:7.0.0"]&&_()}catch(Fe){}const _e="requests",xe="queueName";class Re{constructor(){this._db=null}async addEntry(e){const t=(await this.getDb()).transaction(_e,"readwrite",{durability:"relaxed"});await t.store.add(e),await t.done}async getFirstEntryId(){const e=await this.getDb(),t=await e.transaction(_e).store.openCursor();return null===t||void 0===t?void 0:t.value.id}async getAllEntriesByQueueName(e){const t=await this.getDb(),r=await t.getAllFromIndex(_e,xe,IDBKeyRange.only(e));return r||new Array}async getEntryCountByQueueName(e){return(await this.getDb()).countFromIndex(_e,xe,IDBKeyRange.only(e))}async deleteEntry(e){const t=await this.getDb();await t.delete(_e,e)}async getFirstEntryByQueueName(e){return await this.getEndEntryFromIndex(IDBKeyRange.only(e),"next")}async getLastEntryByQueueName(e){return await this.getEndEntryFromIndex(IDBKeyRange.only(e),"prev")}async getEndEntryFromIndex(e,t){const r=await this.getDb(),s=await r.transaction(_e).store.index(xe).openCursor(e,t);return null===s||void 0===s?void 0:s.value}async getDb(){return this._db||(this._db=await function(e,t,{blocked:r,upgrade:s,blocking:a,terminated:n}={}){const o=indexedDB.open(e,t),i=ge(o);return s&&o.addEventListener("upgradeneeded",(e=>{s(ge(o.result),e.oldVersion,e.newVersion,ge(o.transaction),e)})),r&&o.addEventListener("blocked",(e=>r(e.oldVersion,e.newVersion,e))),i.then((e=>{n&&e.addEventListener("close",(()=>n())),a&&e.addEventListener("versionchange",(e=>a(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),i}("workbox-background-sync",3,{upgrade:this._upgradeDb})),this._db}_upgradeDb(e,t){t>0&&t<3&&e.objectStoreNames.contains(_e)&&e.deleteObjectStore(_e);e.createObjectStore(_e,{autoIncrement:!0,keyPath:"id"}).createIndex(xe,xe,{unique:!1})}}class qe{constructor(e){this._queueName=e,this._queueDb=new Re}async pushEntry(e){u(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry"}),u(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry.requestData"}),delete e.id,e.queueName=this._queueName,await this._queueDb.addEntry(e)}async unshiftEntry(e){u(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry"}),u(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry.requestData"});const t=await this._queueDb.getFirstEntryId();t?e.id=t-1:delete e.id,e.queueName=this._queueName,await this._queueDb.addEntry(e)}async popEntry(){return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName))}async shiftEntry(){return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName))}async getAll(){return await this._queueDb.getAllEntriesByQueueName(this._queueName)}async size(){return await this._queueDb.getEntryCountByQueueName(this._queueName)}async deleteEntry(e){await this._queueDb.deleteEntry(e)}async _removeEntry(e){return e&&await this.deleteEntry(e.id),e}}const ve=["method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive"];class Ee{static async fromRequest(e){const t={url:e.url,headers:{}};"GET"!==e.method&&(t.body=await e.clone().arrayBuffer());for(const[r,s]of e.headers.entries())t.headers[r]=s;for(const r of ve)void 0!==e[r]&&(t[r]=e[r]);return new Ee(t)}constructor(e){u(e,"object",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData"}),u(e.url,"string",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData.url"}),"navigate"===e.mode&&(e.mode="same-origin"),this._requestData=e}toObject(){const e=Object.assign({},this._requestData);return e.headers=Object.assign({},this._requestData.headers),e.body&&(e.body=e.body.slice(0)),e}toRequest(){return new Request(this._requestData.url,this._requestData)}clone(){return new Ee(this.toObject())}}const ke="workbox-background-sync",Ce=new Set,$e=e=>{const t={request:new Ee(e.requestData).toRequest(),timestamp:e.timestamp};return e.metadata&&(t.metadata=e.metadata),t};class De{constructor(e,{forceSyncFallback:t,onSync:r,maxRetentionTime:s}={}){if(this._syncInProgress=!1,this._requestsAddedDuringSync=!1,Ce.has(e))throw new a("duplicate-queue-name",{name:e});Ce.add(e),this._name=e,this._onSync=r||this.replayRequests,this._maxRetentionTime=s||10080,this._forceSyncFallback=Boolean(t),this._queueStore=new qe(this._name),this._addSyncListener()}get name(){return this._name}async pushRequest(e){u(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry"}),i(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry.request"}),await this._addRequest(e,"push")}async unshiftRequest(e){u(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry"}),i(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry.request"}),await this._addRequest(e,"unshift")}async popRequest(){return this._removeRequest("pop")}async shiftRequest(){return this._removeRequest("shift")}async getAll(){const e=await this._queueStore.getAll(),t=Date.now(),r=[];for(const s of e){const e=60*this._maxRetentionTime*1e3;t-s.timestamp>e?await this._queueStore.deleteEntry(s.id):r.push($e(s))}return r}async size(){return await this._queueStore.size()}async _addRequest({request:e,metadata:r,timestamp:s=Date.now()},a){const n={requestData:(await Ee.fromRequest(e.clone())).toObject(),timestamp:s};switch(r&&(n.metadata=r),a){case"push":await this._queueStore.pushEntry(n);break;case"unshift":await this._queueStore.unshiftEntry(n)}t.log(`Request for '${p(e.url)}' has been added to background sync queue '${this._name}'.`),this._syncInProgress?this._requestsAddedDuringSync=!0:await this.registerSync()}async _removeRequest(e){const t=Date.now();let r;switch(e){case"pop":r=await this._queueStore.popEntry();break;case"shift":r=await this._queueStore.shiftEntry()}if(r){const s=60*this._maxRetentionTime*1e3;return t-r.timestamp>s?this._removeRequest(e):$e(r)}}async replayRequests(){let e;for(;e=await this.shiftRequest();)try{await fetch(e.request.clone()),t.log(`Request for '${p(e.request.url)}' has been replayed in queue '${this._name}'`)}catch(r){throw await this.unshiftRequest(e),t.log(`Request for '${p(e.request.url)}' failed to replay, putting it back in queue '${this._name}'`),new a("queue-replay-failed",{name:this._name})}t.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`)}async registerSync(){if("sync"in self.registration&&!this._forceSyncFallback)try{await self.registration.sync.register(`${ke}:${this._name}`)}catch(e){t.warn(`Unable to register sync event for '${this._name}'.`,e)}}_addSyncListener(){"sync"in self.registration&&!this._forceSyncFallback?self.addEventListener("sync",(e=>{if(e.tag===`${ke}:${this._name}`){t.log(`Background sync for tag '${e.tag}' has been received`);const r=async()=>{let t;this._syncInProgress=!0;try{await this._onSync({queue:this})}catch(r){if(r instanceof Error)throw t=r,t}finally{!this._requestsAddedDuringSync||t&&!e.lastChance||await this.registerSync(),this._syncInProgress=!1,this._requestsAddedDuringSync=!1}};e.waitUntil(r())}})):(t.log("Background sync replaying without background sync event"),this._onSync({queue:this}))}static get _queueNames(){return Ce}}function Te(e,t){const r=t();return e.waitUntil(r),r}try{self["workbox:precaching:7.0.0"]&&_()}catch(Fe){}function Se(e){if(!e)throw new a("add-to-cache-list-unexpected-type",{entry:e});if("string"===typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:r}=e;if(!r)throw new a("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(r,location.href);return{cacheKey:e.href,url:e.href}}const s=new URL(r,location.href),n=new URL(r,location.href);return s.searchParams.set("__WB_REVISION__",t),{cacheKey:s.href,url:n.href}}class Le{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:r})=>{if("install"===e.type&&t&&t.originalRequest&&t.originalRequest instanceof Request){const e=t.originalRequest.url;r?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return r}}}class Ue{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const r=(null===t||void 0===t?void 0:t.cacheKey)||this._precacheController.getCacheKeyForURL(e.url);return r?new Request(r,{headers:e.headers}):e},this._precacheController=e}}function Pe(e){const r=e.length;r>0&&(t.groupCollapsed(`During precaching cleanup, ${r} cached request${1===r?" was":"s were"} deleted.`),((e,r)=>{t.groupCollapsed(e);for(const s of r)t.log(s);t.groupEnd()})("Deleted Cache Requests",e),t.groupEnd())}function Ie(e,r){if(0!==r.length){t.groupCollapsed(e);for(const e of r)t.log(e);t.groupEnd()}}let Ae,Be;async function Oe(e,t){let r=null;if(e.url){r=new URL(e.url).origin}if(r!==self.location.origin)throw new a("cross-origin-copy-response",{origin:r});const s=e.clone(),n={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},o=t?t(n):n,i=function(){if(void 0===Ae){const t=new Response("");if("body"in t)try{new Response(t.body),Ae=!0}catch(e){Ae=!1}Ae=!1}return Ae}()?s.body:await s.blob();return new Response(i,o)}class je extends Z{constructor(e={}){e.cacheName=x(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(je.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const r=await t.cacheMatch(e);return r||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,r){let s;const n=r.params||{};if(!this._fallbackToNetwork)throw new a("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{t.warn(`The precached response for ${p(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const a=n.integrity,o=e.integrity,i=!o||o===a;if(s=await r.fetch(new Request(e,{integrity:"no-cors"!==e.mode?o||a:void 0})),a&&i&&"no-cors"!==e.mode){this._useDefaultCacheabilityPluginIfNeeded();await r.cachePut(e,s.clone())&&t.log(`A response for ${p(e.url)} was used to "repair" the precache.`)}}{const a=n.cacheKey||await r.getCacheKey(e,"read");t.groupCollapsed("Precaching is responding to: "+p(e.url)),t.log(`Serving the precached url: ${p(a instanceof Request?a.url:a)}`),t.groupCollapsed("View request details here."),t.log(e),t.groupEnd(),t.groupCollapsed("View response details here."),t.log(s),t.groupEnd(),t.groupEnd()}return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const r=await t.fetch(e);if(!await t.cachePut(e,r.clone()))throw new a("bad-precaching-response",{url:e.url,status:r.status});return r}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[r,s]of this.plugins.entries())s!==je.copyRedirectedCacheableResponsesPlugin&&(s===je.defaultPrecacheCacheabilityPlugin&&(e=r),s.cacheWillUpdate&&t++);0===t?this.plugins.push(je.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}je.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},je.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await Oe(e):e};class Me{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:r=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new je({cacheName:x(e),plugins:[...t,new Ue({precacheController:this})],fallbackToNetwork:r}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){o(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const r=[];for(const s of e){"string"===typeof s?r.push(s):s&&void 0===s.revision&&r.push(s.url);const{cacheKey:e,url:n}=Se(s),o="string"!==typeof s&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(n)&&this._urlsToCacheKeys.get(n)!==e)throw new a("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(n),secondEntry:e});if("string"!==typeof s&&s.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==s.integrity)throw new a("add-to-cache-list-conflicting-integrities",{url:n});this._cacheKeysToIntegrities.set(e,s.integrity)}if(this._urlsToCacheKeys.set(n,e),this._urlsToCacheModes.set(n,o),r.length>0){const e=`Workbox is precaching URLs without revision info: ${r.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;t.warn(e)}}}install(e){return Te(e,(async()=>{const r=new Le;this.strategy.plugins.push(r);for(const[t,n]of this._urlsToCacheKeys){const r=this._cacheKeysToIntegrities.get(n),s=this._urlsToCacheModes.get(t),a=new Request(t,{integrity:r,cache:s,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:n},request:a,event:e}))}const{updatedURLs:s,notUpdatedURLs:a}=r;return function(e,r){const s=e.length,a=r.length;if(s||a){let n=`Precaching ${s} file${1===s?"":"s"}.`;a>0&&(n+=` ${a} file${1===a?" is":"s are"} already cached.`),t.groupCollapsed(n),Ie("View newly precached URLs.",e),Ie("View previously precached URLs.",r),t.groupEnd()}}(s,a),{updatedURLs:s,notUpdatedURLs:a}}))}activate(e){return Te(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),r=new Set(this._urlsToCacheKeys.values()),s=[];for(const a of t)r.has(a.url)||(await e.delete(a),s.push(a.url));return Pe(s),{deletedURLs:s}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r){return(await self.caches.open(this.strategy.cacheName)).match(r)}}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new a("non-precached-url",{url:e});return r=>(r.request=new Request(e),r.params=Object.assign({cacheKey:t},r.params),this.strategy.handle(r))}}const Ke=()=>(Be||(Be=new Me),Be);class We extends d{constructor(e,r){super((({request:s})=>{const a=e.getURLsToCacheKeys();for(const t of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:r="index.html",cleanURLs:s=!0,urlManipulation:a}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const r of[...e.searchParams.keys()])t.some((e=>e.test(r)))&&e.searchParams.delete(r);return e}(n,t);if(yield o.href,r&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=r,yield e.href}if(s){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(a){const e=a({url:n});for(const t of e)yield t.href}}(s.url,r)){const r=a.get(t);if(r){return{cacheKey:r,integrity:e.getIntegrityForCacheKey(r)}}}t.debug("Precaching did not find a match for "+p(s.url))}),e.strategy)}}e.BackgroundSyncPlugin=class{constructor(e,t){this.fetchDidFail=async({request:e})=>{await this._queue.pushRequest({request:e})},this._queue=new De(e,t)}},e.CacheFirst=class extends Z{async _handle(e,r){const s=[];i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let n,o=await r.cacheMatch(e);if(o)s.push(`Found a cached response in the '${this.cacheName}' cache.`);else{s.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{o=await r.fetchAndCachePut(e)}catch(c){c instanceof Error&&(n=c)}o?s.push("Got response from network."):s.push("Unable to get a response from the network.")}t.groupCollapsed(ee(this.constructor.name,e));for(const a of s)t.log(a);if(te(o),t.groupEnd(),!o)throw new a("no-response",{url:e.url,error:n});return o}},e.CacheableResponsePlugin=class{constructor(e){this.cacheWillUpdate=async({response:e})=>this._cacheableResponse.isResponseCacheable(e)?e:null,this._cacheableResponse=new re(e)}},e.ExpirationPlugin=class{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:r,cacheName:s,cachedResponse:a})=>{if(!a)return null;const n=this._isResponseDateFresh(a),o=this._getCacheExpiration(s);q(o.expireEntries());const i=o.updateTimestamp(r.url);if(e)try{e.waitUntil(i)}catch(c){"request"in e&&t.warn(`Unable to ensure service worker stays alive when updating cache entry for '${p(e.request.url)}'.`)}return n?a:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{u(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),i(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const r=this._getCacheExpiration(e);await r.updateTimestamp(t.url),await r.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new a("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});e.maxEntries&&u(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&u(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&function(e){u(e,"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),v.add(e),t.log("Registered a callback to respond to quota errors.",e)}((()=>this.deleteCacheAndMetadata()))}_getCacheExpiration(e){if(e===R())throw new a("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new Q(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),r=new Date(t).getTime();return isNaN(r)?null:r}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}},e.NetworkFirst=class extends Z{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(se),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&u(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,r){const s=[];i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const n=[];let o;if(this._networkTimeoutSeconds){const{id:t,promise:a}=this._getTimeoutPromise({request:e,logs:s,handler:r});o=t,n.push(a)}const c=this._getNetworkPromise({timeoutId:o,request:e,logs:s,handler:r});n.push(c);const u=await r.waitUntil((async()=>await r.waitUntil(Promise.race(n))||await c)());t.groupCollapsed(ee(this.constructor.name,e));for(const a of s)t.log(a);if(te(u),t.groupEnd(),!u)throw new a("no-response",{url:e.url});return u}_getTimeoutPromise({request:e,logs:t,handler:r}){let s;return{promise:new Promise((a=>{s=setTimeout((async()=>{t.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`),a(await r.cacheMatch(e))}),1e3*this._networkTimeoutSeconds)})),id:s}}async _getNetworkPromise({timeoutId:e,request:t,logs:r,handler:s}){let a,n;try{n=await s.fetchAndCachePut(t)}catch(o){o instanceof Error&&(a=o)}return e&&clearTimeout(e),n?r.push("Got response from network."):r.push("Unable to get a response from the network. Will respond with a cached response."),!a&&n||(n=await s.cacheMatch(t),n?r.push(`Found a cached response in the '${this.cacheName}' cache.`):r.push(`No response found in the '${this.cacheName}' cache.`)),n}},e.NetworkOnly=class extends Z{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,r){let s,n;i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"_handle",paramName:"request"});try{const t=[r.fetch(e)];if(this._networkTimeoutSeconds){const e=J(1e3*this._networkTimeoutSeconds);t.push(e)}if(n=await Promise.race(t),!n)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(o){o instanceof Error&&(s=o)}if(t.groupCollapsed(ee(this.constructor.name,e)),n?t.log("Got response from network."):t.log("Unable to get a response from the network."),te(n),t.groupEnd(),!n)throw new a("no-response",{url:e.url,error:s});return n}},e.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},e.precacheAndRoute=function(e,t){!function(e){Ke().precache(e)}(e),function(e){const t=Ke();y(new We(t,e))}(t)},e.registerRoute=y}));